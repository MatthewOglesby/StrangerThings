{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT';\nexport const getPosts = async () => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch (ex) {\n    console.log('error getting all posts');\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error registering user');\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error logging in user');\n  }\n};\nexport const getUserDetails = async token => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error gettings user details');\n  }\n};","map":{"version":3,"names":["baseURL","getPosts","response","fetch","headers","token","results","json","ex","console","log","registerUser","username","password","method","body","JSON","stringify","user","result","loginUser","getUserDetails"],"sources":["C:/Users/19314/Desktop/Course Work/Week 12/Stranger Things/src/api/index.js"],"sourcesContent":["const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT'\r\n\r\nexport const getPosts = async () => {\r\n    try {\r\n        const response = await fetch(`${baseURL}/posts`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        const results = await response.json();\r\n        return results;\r\n    } catch (ex) {\r\n        console.log('error getting all posts')\r\n    }\r\n}\r\n\r\nexport const registerUser = async (username, password) => {\r\n    try {\r\n        const response = await fetch(`${baseURL}/users/register`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user: {\r\n                    username: username,\r\n                    password: password\r\n                }\r\n            })\r\n        })\r\n        const result = await response.json();\r\n        return result;\r\n\r\n    } catch (ex) {\r\n        console.log('error registering user')\r\n    }\r\n}\r\n\r\nexport const loginUser = async (username, password) => {\r\n    try {\r\n        const response = await fetch(`${baseURL}/users/login`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user: {\r\n                    username,\r\n                    password\r\n                }\r\n            })\r\n        })\r\n\r\n        const result = await response.json();\r\n        return result;\r\n\r\n    } catch (ex) {\r\n        console.log('error logging in user')\r\n    }\r\n}\r\n\r\nexport const getUserDetails = async(token) => {\r\n    try {\r\n        const response = await fetch(`${baseURL}/users/me`, {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n          })\r\n\r\n          const result = await response.json();\r\n          return result;\r\n\r\n    } catch(ex){\r\n        console.log('error gettings user details')\r\n    }\r\n}"],"mappings":"AAAA,MAAMA,OAAO,GAAG,+DAAhB;AAEA,OAAO,MAAMC,QAAQ,GAAG,YAAY;EAChC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,QAAZ,EAAqB;MAC7CI,OAAO,EAAE;QACL,gBAAgB,kBADX;QAEL,iBAAkB,UAASC,KAAM;MAF5B;IADoC,CAArB,CAA5B;IAMA,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAtB;IACA,OAAOD,OAAP;EACH,CATD,CASE,OAAOE,EAAP,EAAW;IACTC,OAAO,CAACC,GAAR,CAAY,yBAAZ;EACH;AACJ,CAbM;AAeP,OAAO,MAAMC,YAAY,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;EACtD,IAAI;IACA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,iBAAZ,EAA8B;MACtDc,MAAM,EAAE,MAD8C;MAEtDV,OAAO,EAAE;QACL,gBAAgB;MADX,CAF6C;MAKtDW,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACjBC,IAAI,EAAE;UACFN,QAAQ,EAAEA,QADR;UAEFC,QAAQ,EAAEA;QAFR;MADW,CAAf;IALgD,CAA9B,CAA5B;IAYA,MAAMM,MAAM,GAAG,MAAMjB,QAAQ,CAACK,IAAT,EAArB;IACA,OAAOY,MAAP;EAEH,CAhBD,CAgBE,OAAOX,EAAP,EAAW;IACTC,OAAO,CAACC,GAAR,CAAY,wBAAZ;EACH;AACJ,CApBM;AAsBP,OAAO,MAAMU,SAAS,GAAG,OAAOR,QAAP,EAAiBC,QAAjB,KAA8B;EACnD,IAAI;IACA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,cAAZ,EAA2B;MACnDc,MAAM,EAAE,MAD2C;MAEnDV,OAAO,EAAE;QACL,gBAAgB;MADX,CAF0C;MAKnDW,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACjBC,IAAI,EAAE;UACFN,QADE;UAEFC;QAFE;MADW,CAAf;IAL6C,CAA3B,CAA5B;IAaA,MAAMM,MAAM,GAAG,MAAMjB,QAAQ,CAACK,IAAT,EAArB;IACA,OAAOY,MAAP;EAEH,CAjBD,CAiBE,OAAOX,EAAP,EAAW;IACTC,OAAO,CAACC,GAAR,CAAY,uBAAZ;EACH;AACJ,CArBM;AAuBP,OAAO,MAAMW,cAAc,GAAG,MAAMhB,KAAN,IAAgB;EAC1C,IAAI;IACA,MAAMH,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,WAAZ,EAAwB;MAChDI,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,iBAAkB,UAASC,KAAM;MAF1B;IADuC,CAAxB,CAA5B;IAOE,MAAMc,MAAM,GAAG,MAAMjB,QAAQ,CAACK,IAAT,EAArB;IACA,OAAOY,MAAP;EAEL,CAXD,CAWE,OAAMX,EAAN,EAAS;IACPC,OAAO,CAACC,GAAR,CAAY,6BAAZ;EACH;AACJ,CAfM"},"metadata":{},"sourceType":"module"}