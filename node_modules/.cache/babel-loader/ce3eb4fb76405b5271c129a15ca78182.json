{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT';\nexport const getPosts = async token => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch (ex) {\n    console.log('error getting all posts');\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error registering user');\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error logging in user');\n  }\n};\nexport const getUserDetails = async token => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error gettings user details');\n  }\n};\nexport const createPost = async (token, _ref) => {\n  let {\n    title,\n    description,\n    price,\n    location,\n    willDeliver\n  } = _ref;\n\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error creating a post');\n  }\n};\nexport const deletePost = async (token, _id) => {\n  try {\n    const response = await fetch(`${baseURL}/posts/${_id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => response.json()).then(result => {\n      console.log(result);\n    }).catch(console.error);\n    return response;\n  } catch (ex) {\n    console.log('error deleting post');\n  }\n};\nexport const updatePost = async (token, _ref2) => {\n  let {\n    title,\n    description,\n    price,\n    location,\n    willDeliver\n  } = _ref2;\n\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error updating post');\n  }\n};","map":{"version":3,"names":["baseURL","getPosts","token","response","fetch","headers","results","json","ex","console","log","registerUser","username","password","method","body","JSON","stringify","user","result","loginUser","getUserDetails","createPost","title","description","price","location","willDeliver","post","deletePost","_id","then","catch","error","updatePost"],"sources":["C:/Users/19314/Desktop/Course Work/Week 12/Stranger Things/src/api/index.js"],"sourcesContent":["const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT'\r\n\r\nexport const getPosts = async (token) => {\r\n    try {\r\n        const response = await fetch(`${baseURL}/posts`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n              },\r\n        });\r\n        const results = await response.json();\r\n        return results;\r\n    } catch (ex) {\r\n        console.log('error getting all posts')\r\n    }\r\n}\r\n\r\nexport const registerUser = async (username, password) => {\r\n    try {\r\n        const response = await fetch(`${baseURL}/users/register`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user: {\r\n                    username: username,\r\n                    password: password\r\n                }\r\n            })\r\n        })\r\n        const result = await response.json();\r\n        return result;\r\n\r\n    } catch (ex) {\r\n        console.log('error registering user')\r\n    }\r\n}\r\n\r\nexport const loginUser = async (username, password) => {\r\n    try {\r\n        const response = await fetch(`${baseURL}/users/login`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user: {\r\n                    username,\r\n                    password\r\n                }\r\n            })\r\n        })\r\n\r\n        const result = await response.json();\r\n        return result;\r\n\r\n    } catch (ex) {\r\n        console.log('error logging in user')\r\n    }\r\n}\r\n\r\nexport const getUserDetails = async(token) => {\r\n    try {\r\n        const response = await fetch(`${baseURL}/users/me`, {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n          })\r\n\r\n          const result = await response.json();\r\n          return result;\r\n\r\n    } catch(ex){\r\n        console.log('error gettings user details')\r\n    }\r\n}\r\n\r\nexport const createPost = async (token, {title, description, price, location, willDeliver}) => {\r\n    try {\r\n        const response = await fetch(`${baseURL}/posts`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n              },\r\n              body: JSON.stringify({\r\n                post: {\r\n                  title,\r\n                  description,\r\n                  price,\r\n                  location,\r\n                  willDeliver\r\n                }\r\n              })\r\n        })\r\n\r\n        const result = await response.json();\r\n        return result;\r\n    } catch(ex) {\r\n        console.log('error creating a post')\r\n    }\r\n}\r\n\r\nexport const deletePost = async (token, _id) => {\r\n    try {\r\n        const response = await fetch(`${baseURL}/posts/${_id}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          }).then(response => response.json())\r\n          .then(result => {\r\n            console.log(result);\r\n          })\r\n          .catch(console.error);\r\n          return response;\r\n    } catch(ex) {\r\n        console.log('error deleting post')\r\n    }\r\n}\r\n\r\nexport const updatePost = async(token, {title, description, price, location, willDeliver}) => {\r\n    try {\r\n        const response = await fetch(`${baseURL}/posts`, {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n              },\r\n              body: JSON.stringify({\r\n                post: {\r\n                  title,\r\n                  description,\r\n                  price,\r\n                  location,\r\n                  willDeliver\r\n                }\r\n              })\r\n        })\r\n\r\n        const result = await response.json();\r\n        return result;\r\n    } catch(ex) {\r\n        console.log('error updating post')\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}